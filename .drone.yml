kind: pipeline
type: docker
name: ci-cd

environment:
  LAST_COMMIT_HASH: "$${DRONE_COMMIT_SHA::7}"
  APP_NAME: learn
  GOOS: linux
  GOARCH: amd64
  CGO_ENABLED: "0"

steps:
- name: restore-cache-with-filesystem
  image: meltwater/drone-cache:dev
  pull: true
  settings:
    backend: "filesystem"
    restore: true
    cache_key: "volume"
    archive_format: "gzip"
    # filesystem_cache_root: "/tmp/cache"
    mount:
      - 'vendor'
  volumes:
  - name: cache
    path: /tmp/cache

- name: dependencies
  image: golang:1.14-alpine
  commands:
    - |
      go get -v -t -d ./...
      if [ -f Gopkg.toml ]; then
          curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
          dep ensure
      fi

- name: test
  image: golang:1.14-alpine
  commands:
    - "go test -v ."

- name: build
  image: golang:1.14-alpine
  commands:
    - go build -a -installsuffix cgo -ldflags '-extldflags "-static"' -o main .

- name: publish
  image: "plugins/docker"
  settings:
    repo: "${DRONE_REPO_NAMESPACE}/${DRONE_REPO_NAME}"
    tags: ["latest"]
    username:
      from_secret: docker_username
    password:
      from_secret: docker_password
    registry: docker.io

- name: deliver
  image: dxas90/drone-kubectl
  environment:
    KUBE_CONFIG:
      from_secret: kube_config
  commands:
    - export APP_IMAGE=$${DRONE_REPO_NAMESPACE}/$${DRONE_REPO_NAME}
    - export LAST_COMMIT_HASH="$${DRONE_COMMIT_SHA::7}"
    - envsubst < k8s/deployment.yaml > k8s/deployment_new.yaml
    - /bin/kubectl apply -f k8s/deployment_new.yaml -n drone

- name: rebuild-cache-with-filesystem
  image: meltwater/drone-cache:dev
  pull: true
  settings:
    backend: "filesystem"
    rebuild: true
    cache_key: "volume"
    archive_format: "gzip"
    # filesystem_cache_root: "/tmp/cache"
    mount:
      - 'vendor'
  volumes:
  - name: cache
    path: /tmp/cache

volumes:
  - name: cache
    host:
      path: /var/lib/cache

trigger:
  event:
  - push
